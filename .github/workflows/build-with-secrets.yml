name: Build and Deploy with Secrets

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  # Default environment (can be overridden)
  TARGET_ENV: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  build-with-secrets:
    runs-on: ubuntu-latest
    environment: ${{ env.TARGET_ENV }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v4

    # Create configuration file with secrets
    - name: Create secure config
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
      run: |
        if [ "$TARGET_ENV" = "development" ]; then
          echo "Using development config (no secrets needed)"
          cp config/development.json config/generated-config.json
        else
          echo "Creating config for $TARGET_ENV with injected secrets"
          cat > config/generated-config.json << EOF
        {
          "environment": "$TARGET_ENV",
          "supabaseUrl": "$SUPABASE_URL",
          "supabaseAnonKey": "$SUPABASE_ANON_KEY",
          "supabaseServiceRoleKey": "$SUPABASE_SERVICE_ROLE_KEY",
          "supabaseJwtSecret": "$SUPABASE_JWT_SECRET"
        }
        EOF
        fi

    - name: Validate config file
      run: |
        echo "Generated config:"
        cat config/generated-config.json | sed 's/"anonKey":"[^"]*"/"anonKey":"***"/' | sed 's/"serviceRoleKey":"[^"]*"/"serviceRoleKey":"***"/' | sed 's/"jwtSecret":"[^"]*"/"jwtSecret":"***"/'

    - name: Copy config to assets
      run: |
        mkdir -p composeApp/src/androidMain/assets
        cp config/generated-config.json composeApp/src/androidMain/assets/app-config.json

    - name: Clean Gradle cache
      run: ./gradlew clean

    - name: Build debug APK (Development)
      if: env.TARGET_ENV == 'development'
      run: |
        echo "Building development APK"
        ./gradlew assembleDebug --no-daemon

    - name: Build staging APK
      if: env.TARGET_ENV == 'staging'
      run: |
        echo "Building staging APK with injected secrets"
        ./gradlew assembleStaging --no-daemon

    - name: Build release APK (Production)
      if: env.TARGET_ENV == 'production'
      run: |
        echo "Building production APK with injected secrets"
        ./gradlew assembleRelease --no-daemon

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ${{ env.TARGET_ENV }}-apk
        path: |
          composeApp/build/outputs/apk/**/*.apk
        retention-days: ${{ env.TARGET_ENV == 'production' && '90' || '30' }}

    - name: Build Summary
      run: |
        echo "## ðŸ“± Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: $TARGET_ENV" >> $GITHUB_STEP_SUMMARY
        echo "- **Secrets**: âœ… Successfully injected" >> $GITHUB_STEP_SUMMARY
        echo "- **APK Ready**: ðŸ“¦ Download from artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸš€ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the APK from the artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "2. Install on your device via ADB or side-loading" >> $GITHUB_STEP_SUMMARY
        echo "3. The app will connect to the $TARGET_ENV environment" >> $GITHUB_STEP_SUMMARY